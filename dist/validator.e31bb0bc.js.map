{"version":3,"sources":["validator.js","index.js"],"names":["validatorFunctions","notEmpty","value","Boolean","regexp","validator","test","stringLength","min","max","trim","isValid","length","Validator","config","validateOnBlur","validateOnInput","submitButton","addListeners","fields","forEach","fieldConfig","element","validators","keys","Object","fieldValidations","self","key","push","validatorFn","runValidations","errors","message","console","log","addEventListener","call","Element","document","getElementById","querySelector"],"mappings":"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","file":"validator.e31bb0bc.js","sourceRoot":"..","sourcesContent":["const validatorFunctions = {\n  notEmpty: value => {\n    return Boolean(value);\n  },\n\n  regexp: (value, validator) => {\n    return validator.regexp.test(value);\n  },\n\n  stringLength: (value, validator) => {\n    const { min, max, trim } = validator;\n    let isValid = false;\n\n    if (trim) {\n      value = value.trim();\n    }\n\n    if (validator.min) {\n      isValid = value.length >= min;\n    }\n\n    if (validator.max) {\n      isValid = isValid && value.length <= max;\n    }\n\n    return isValid;\n  }\n};\n\nexport default class Validator {\n  constructor(config) {\n    this.config = config;\n    this.validateOnBlur = Boolean(config.validateOnBlur) || true;\n    this.validateOnInput = Boolean(config.validateOnInput) || false;\n    this.submitButton = config.submitButton;\n    this.addListeners();\n  }\n\n  addListeners() {\n    this.config.fields.forEach(fieldConfig => {\n      const { element } = fieldConfig;\n      const { validators } = fieldConfig;\n      const keys = Object.keys(validators);\n      const fieldValidations = [];\n      const self = this;\n\n      keys.forEach(key => {\n        fieldValidations.push({\n          ...validators[key],\n          validatorFn: validatorFunctions[key]\n        });\n      });\n\n      /**\n       * Run all validator functions\n       */\n      const runValidations = function() {\n        const { value } = this;\n        const errors = [];\n        // Set the validator to valid by default\n        self.isValid = true;\n\n        fieldValidations.forEach(validator => {\n          const { validatorFn, message } = validator;\n          const isValid = Boolean(validatorFn(value, validator));\n\n          if (!isValid) {\n            /**\n             * If a field fails validation\n             * Set the status to invalid & push the error message\n             */\n            self.isValid = false;\n            if (message) {\n              errors.push(message);\n            }\n          }\n        });\n\n        console.log(errors);\n      };\n\n      if (this.validateOnBlur) {\n        element.addEventListener(\"blur\", function() {\n          runValidations.call(this);\n        });\n      }\n\n      if (this.validateOnInput) {\n        element.addEventListener(\"input\", function() {\n          runValidations.call(this);\n        });\n      }\n\n      if (this.submitButton && this.submitButton instanceof Element) {\n        this.submitButton.addEventListener(\"click\", () => {\n          runValidations.call(this);\n        });\n      }\n    });\n  }\n}\n","import Validator from \"./validator\";\n\nconst validator = new Validator({\n  fields: [\n    {\n      element: document.getElementById(\"bsbInput\"),\n      validators: {\n        notEmpty: {\n          message: \"You must enter a BSB\"\n        },\n        stringLength: {\n          min: 6,\n          max: 9,\n          trim: true,\n          message: \"BSB should be between 6 and 9 characters\"\n        }\n      }\n    },\n    {\n      element: document.getElementById(\"password\"),\n      validators: {\n        notEmpty: {\n          message: \"You must enter a password\"\n        },\n        regexp: {\n          regexp: /password/,\n          message: 'Password should be \"password\"'\n        }\n      }\n    }\n  ],\n  submitButton: document.querySelector(\"button\"),\n  validateOnBlur: true,\n  validateOnInput: true\n});\n"]}